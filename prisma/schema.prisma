// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                           Int                 @id @default(autoincrement())
  auth_key                     String?             @unique
  email                        String              @unique
  first_name                   String
  last_name                    String
  birthdate                    DateTime
  supervisor                   Account?            @relation("SupervisorRelation", fields: [supervisor_id], references: [id])
  supervisor_id                Int?
  supervisorAccount            Account[]           @relation("SupervisorRelation")
  company                      Company             @relation(fields: [company_id], references: [id], onDelete: Cascade)
  company_id                   Int                  
  created_at                   DateTime            @default(now())
  last_login                   DateTime?
  join_date                    DateTime
  leave_date                   DateTime?
  role                         String
  team                         Team?               @relation(fields: [team_id], references: [id])
  team_id                      Int?
  AttendanceRecord             AttendanceRecord[]
  ptoRequests                  PTORequest[]        @relation("PTORequester")
  approvedPTORequests          PTORequest[]        @relation("PTORequestSupervisor")
  monthlyRequests              MonthlyRequest[]    @relation("MonthlyRequester")
  supervisorMonthlyRequests    MonthlyRequest[]    @relation("MonthlyRequestSupervisor")
  specialPTORequests           SpecialPTORequest[] @relation("SpecialPTORequester")
  supervisedSpecialPTORequests SpecialPTORequest[] @relation("SpecialPTORequestSupervisor")
  Privileges                   Privileges?
  PTO                          PTO?
  SpecialPTO                   SpecialPTO[]

  @@map("account")
}

model Company {
  id      Int       @id @default(autoincrement())
  name    String
  Account Account[] 
  Team Team[] 

  @@map("company")
}

model Team {
  id         Int       @id @default(autoincrement())
  team_name  String
  updated_at DateTime  @updatedAt
  Account    Account[]
  company_id Int
  company    Company   @relation(fields: [company_id], references: [id], onDelete: Cascade)

  @@map("team")
}

model AttendanceRecord {
  id           Int      @id @default(autoincrement())
  account      Account  @relation(fields: [account_id], references: [id])
  account_id   Int
  day          DateTime
  punch_in     DateTime
  punch_out    DateTime
  break_amount Float
  totalHours   Float
  absence      Boolean  @default(false)
  full_pto     Boolean  @default(false)
  half_pto     Boolean  @default(false)
  special_pto  Boolean  @default(false)

  @@map("attendance_record")
}

model PTORequest {
  id            Int       @id @default(autoincrement())
  account       Account   @relation("PTORequester", fields: [account_id], references: [id])
  account_id    Int
  supervisor    Account   @relation("PTORequestSupervisor", fields: [supervisor_id], references: [id])
  supervisor_id Int
  content       String
  status        String
  day_start     DateTime?
  day_end       DateTime?
  day           DateTime?
  all_day       Boolean   @default(false)
  hour_start    DateTime?
  hour_end      DateTime?
  created_at    DateTime  @default(now())
  updated_at    DateTime  @updatedAt

  @@map("pto_request")
}

model SpecialPTORequest {
  id            Int      @id @default(autoincrement())
  account       Account  @relation("SpecialPTORequester", fields: [account_id], references: [id])
  account_id    Int
  supervisor    Account  @relation("SpecialPTORequestSupervisor", fields: [supervisor_id], references: [id])
  supervisor_id Int
  content       String
  type          String
  status        String
  day           DateTime
  created_at    DateTime @default(now())
  updated_at    DateTime @updatedAt

  @@map("special_pto_request")
}

model MonthlyRequest {
  id            Int      @id @default(autoincrement())
  account       Account  @relation("MonthlyRequester", fields: [account_id], references: [id])
  account_id    Int
  supervisor    Account  @relation("MonthlyRequestSupervisor", fields: [supervisor_id], references: [id])
  supervisor_id Int
  month         Int
  year          Int
  content       String
  status        String
  created_at    DateTime @default(now())
  updated_at    DateTime @updatedAt

  @@map("monthly_request")
}

model Privileges {
  account       Account @relation(fields: [account_id], references: [id])
  account_id    Int     @unique
  is_admin      Boolean @default(false)
  is_supervisor Boolean @default(false)

  @@map("privileges")
}

model PTO {
  account       Account  @relation(fields: [account_id], references: [id])
  account_id    Int
  remaining_pto Int
  updated_at    DateTime @updatedAt

  @@unique([account_id])
  @@map("pto")
}

model SpecialPTO {
  id         Int      @id @default(autoincrement())
  account    Account  @relation(fields: [account_id], references: [id])
  account_id Int
  type       String
  updated_at DateTime @updatedAt

  @@map("special_pto")
}
